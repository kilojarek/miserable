{
  "hash": "22aab5471bbf273001656d496ec49b04",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"R, with a little help from a few friends\"\nauthor: \"Jarek Bryk\"\ndate: \"2023-06-28\"\ncategories: [teaching and learning, R, northernBUG]\neditor: source\n---\n\n\n\n### My presentation at the Northern BUG\n\nIn January 2023, I gave a short talk at the 8th meeting of the [Northern Bioinformatics User Group](https://northernbug.github.io/) (nBUG for short), which is an informal network of computational biologists and users or bioinformatics services in the (loosely defined) north of England. If you haven't heard about us and are in range of a reasonable commute, please come to one of our next meetings (we have three one-day, single-track meetings per year), it's really nice :-).\n\nMy talk wasn't actually that short, as I ran over time and could not finish it properly. My excuse is that I was juggling a presentation (with slides), a live demo in R Studio *and* sharing my screen over Teams, over a single projector. This makes it a very good reason to write my short presentation as a blog post.\n\n### Who may find this useful?\n\nWhen I thought about the target audience of the talk, I had in mind postgraduate students, who had already done some work in R and are familiar with the basics of the language (e.g. various data types, loading and transforming data, working in R Studio), but who may not have thought about how to organise their data and scripts, or be aware of really simple tricks that would make their work much more effective and efficient. I didn't really know whether this was the right pitch, but a few post-talk comments indicated that it was a good one.\n\n![He's not wrong ;-). Photo by Andy Mason.](completely_wrong.jpeg){fig-alt=\"Photo of the author in front of the presentation slide with a title \\\"I may be completely wrong\\\"\" fig-align=\"left\"}\n\nHere we go.\n\n### 1. Use projects + here + Rmd/Qmd for everything\n\nThis advice is number one for a reason - projects will instantly make your work easier, because they will force you to organise your files into a consistent structure. And if you combine it with [the package `here`](https://here.r-lib.org), you will get extra benefits of making your code simpler and, most importantly, portable. \n\nI usually set up a self-explanatory three-folder structure within any project: folders `code`, `data`, and `output`. You can make it as complicated as you want (and there are packages that will build a default structure for you - see also advice #2 below), but for 70% of my needs, this is sufficient (and 100% for everything I teach R with). Any self-contained idea, no matter how small, should be in a separate project.\n\n![A consistent project structure will make your life easier](example_project_structure.png){fig-alt=\"Screenshot of folder structure from the Files panel in R Studio\"}\n\n`here()` is a simple function that combines strings into paths. The magic bit is that it does so _relative to the project location_. So you don't have to remember, or type, that your data is located in `/Users/jarek/one_folder/another_folder/folder_hell/my_project_folder/data/my_data.csv`. If you use projects + `here()`, it understands where your project is and creates the path _relative_ to where it is on your hard drive. Like so:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nhere() starts at /Users/jarek/Sites/miserable\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calling the function with no arguments returns what here understands as the project folder location\nhere()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jarek/Sites/miserable\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calling it with arguments returns path to folders and files relative to the project folder location\nhere(\"data\", \"my_data.csv\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"/Users/jarek/Sites/miserable/data/my_data.csv\"\n```\n\n\n:::\n:::\n\n\n\nIt doesn't matter if you are on a Linux machine and your collaborator on a Windows, as long as you use the same project structure and `here()`, wherever your code would refer to files in the project folder, it will work on both machines with no changes. \n\n#### Short rant about file system\n\nThe lack of familiarity with the concepts of a filesystem and directory trees is by far the biggest issue for the students who begin working with R. This is compounded by Microsoft's push to use OneDrive as a main storage space on Windows machines without making it explicit in the user interface. Students tend to download the Rmd/qmd files from our virtual learing environment (VLE) platform and open them directly from the downloads folder. This opens RStudio but confuses `here()`, which shows the downloads folder as the working directory, making all relative links in project files broken. And it is not obvious what is going on, because RStudio by default opens on the last used project, so the interface shows the \"correct\" project name and the file system viewer in the bottom right panel shows the \"corect\" project location on the hard drive. The correct behaviour is to move downloaded files to the appropriate place in the project folder (e.g. `code`) and then open the project itself in RStudio, but this is also tricky for the students, who often struggle to answer question \"where is your project folder?\" and locate it with File Explorer (also, \"what is File Explorer?\").\n\n### 2. Name things well\n\nThere is nothing that I can say about naming things that Jenny Bryan and Danielle Navarro haven't already said much better. Check their presentations, pick one of the suggested approaches to naming and _stick to it_. Sticking to it is more important than the exact approach that you choose.\n\n- [Project Structure, a presentation by Danielle Navarro](https://djnavarro.net/slides-project-structure/#1)\n- [Naming, a presentation by Jenny Bryan][https://www2.stat.duke.edu/~rcs46/lectures_2015/01-markdown-git/slides/naming-slides/naming-slides.pdf]\n\n### 3. Five or six packages that will make your life _much_ easier\n\nCheating a little, I also wanted to mention several packages with functions that, in my opinion, really make data wrangling and running statistics (pretty much 90% of what my imaginary target audience wants to do) much easier. Here are the best of:\n\n-   [datapasta](https://milesmcbain.github.io/datapasta/) by Miles McBain. It's an R Studio addin that lets you easily copy-paste basic data structures into R (e.g. vectors and tables), skipping the formatting and importing steps. Here is an animated GIF from the linked website that explains it:\n\n![What datapasta does. Excellent name, too.](datapasta.gif){fig-alt=\"Animated GIF demonstrating what datapasta does\" fig-align=\"left\"}\n\nI use it quite often, it's great to create dummy data to test various functions or try to understand what's going on with my code.\n\n-   [janitor](https://sfirke.github.io/janitor/) by Sam Firke. Probably the most popular of the basic data wrangling packages, with its blockbuster function `clean_names()`, which standardises messy column names by substituting spaces, normalising type cases and protecting from having names starting with a number or other forbidden symbol. But it also has a function `get_dupes()` that identifies duplicated rows/variables in the data and a function `tabyl()` that prettifies tables, including adding rows with totals or formatting the tables as inputs to statistical tests such as χ^2^.\n\n-   [rstatix](https://rpkgs.datanovia.com/rstatix/) by Alboukadel Kassambara. This package is useful for two main reasons: a) it provides wrappers around base r statistical tests making them compatible with pipe (incouding outputting test results as tibbles) and b) it provides function `get_summary_stats()` that calculates basic and not-so-basic descriptive statistics (including operations on groups). Here is an example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n\n```{.r .cell-code}\nlibrary(rstatix)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n\nAttaching package: 'rstatix'\n\nThe following object is masked from 'package:stats':\n\n    filter\n```\n\n\n:::\n\n```{.r .cell-code}\nmtcars %>% \n\tt_test(disp~cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 10\n  .y.   group1 group2    n1    n2 statistic    df        p    p.adj p.adj.signif\n* <chr> <chr>  <chr>  <int> <int>     <dbl> <dbl>    <dbl>    <dbl> <chr>       \n1 disp  4      6         11     7     -4.42  9.22 2   e- 3 2   e- 3 **          \n2 disp  4      8         11    14    -12.5  17.8  3.03e-10 9.09e-10 ****        \n3 disp  6      8          7    14     -7.08 17.9  1.36e- 6 2.72e- 6 ****        \n```\n\n\n:::\n:::\n\n\nIf your categorical variable contains more than two groups, `t_test` will automatically perform all pairwise tests.\n\nHere is another:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmtcars %>% \n\tgroup_by(cyl) %>% \n\tget_summary_stats(disp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 14\n    cyl variable     n   min   max median    q1    q3   iqr   mad  mean    sd\n  <dbl> <fct>    <dbl> <dbl> <dbl>  <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>\n1     4 disp        11  71.1  147.   108   78.8  121.  41.8  43.0  105.  26.9\n2     6 disp         7 145    258    168. 160    196.  36.3  11.3  183.  41.6\n3     8 disp        14 276.   472    350. 302.   390   88.2  73.4  353.  67.8\n# ℹ 2 more variables: se <dbl>, ci <dbl>\n```\n\n\n:::\n:::\n\n\n\nDo check parameter `type =` for options of what descriptive stats you want to include in the output of `get_summary_stats()`.\n\nThe only (slight) concern about `rstatix` is its pace of development. Only one issue was patched in the last 1.5 years and at least some of the wrappers do not yet work (I am aware of `chisq_test()` which doesn't yet seem to be pipe-compatible). But other than that, it's great.\n\n-   [broom](https://broom.tidymodels.org/index.html) by David Robinson *et al.* is another of the \"prettifying\" packages, this time for statistical model outputs. Essentially, it turns output from `lm()` (and 100+ other models) into a tidy tabular format. It is also able to add extra columns with residuals and predicted values from the model to the original data. It is now part of the `tidymodels` approach.\n\n-   [forcats](https://forcats.tidyverse.org) by Hadley Wickham. It is a part of the `tidyverse` metapackage and is meant to facilitate handling of categorical variables. It is particularly useful for ordering these variables and for grouping them. For example, you can plot only the top three categories in your data (lumping the rest into the \"Other\" category) with `fct_lump()` and put the values in decreasing order by median of another variable with `fct_reorder()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndiamonds %>% \n\tsample_frac(0.1) %>% \n\tmutate(cut = fct_lump(cut, 3), # Group categories outside of top 3 into \"Other\"\n\t\t\t\t cut = fct_reorder(cut, price, median, .desc = TRUE)) %>% # Reorder categories of diamond cut by median of their price, in decreasing order\n\tggplot(aes(x = cut, y = price)) + geom_boxplot() + theme_minimal()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n### 4. Know your interface\n\nSpend some time on learning the interface of RStudio and force yourself to use its features until they become second nature. In the simplest case, pick a good colour theme in settings, add coloured lines to indicate tabs (and matching colours for brackets), and a good typeface. Uncheck the default options to save history and environment - and make sure you can reproduce your entire analysis from your Rmd/qmd document.\n\nThen learn the basic keyboard shortcuts (Option-Shift-K shows all shortcuts, for Windows just replace Option with Alt and Command with Windows key):\n- insert new chunk (Control-Option-I)\n- insert pipe symbol (Option--)\n- run current line/run current chunk (Control-Enter/Control-Shift-Enter)\n- switch between panes and expand them to full screen (Control-Shift-1 for the source panel, etc.. Press again to expand.)\n- move lines of code up/down (Option-↑ or ↓)\n\nFinally, learn to use these:\n- multi-line cursors (Control-Option-↑ or ↓)\n- rename-in-scope (Control-Option-Shift-M)\n- multi-file find-and-replace (Shift-Command-F): you need to find stuff first, then toggle Replace switch\n\nGood people at Appsilon have compiled those and many others into a nice gif-torial: RStudio IDE Tips And Tricks - Shortcuts You Must Know [Part 1](https://www.appsilon.com/post/r-studio-shortcuts-and-tips-2) and [Part 2](https://www.appsilon.com/post/r-studio-shortcuts-and-tips-part-2).\n\n### 5. What lies beyond\n\nAnd that's it. I hope you will find these tips and resources useful. [The slides from the presentation and the code I ran during the talk are available on Github.](link_to_repo)\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}