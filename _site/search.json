[
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "1 + 1\n\n[1] 2\n\n\nOne more time\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\n\n\nrodents <- read_tsv(\"https://bit.ly/rodents_small\")\n\nRows: 30738 Columns: 13\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \"\\t\"\nchr (6): species_id, sex, genus, species, taxa, plot_type\ndbl (7): record_id, month, day, year, plot_id, hindfoot_length, weight\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nrodents\n\n# A tibble: 30,738 × 13\n   record…¹ month   day  year plot_id speci…² sex   hindf…³ weight genus species\n      <dbl> <dbl> <dbl> <dbl>   <dbl> <chr>   <chr>   <dbl>  <dbl> <chr> <chr>  \n 1      845     5     6  1978       2 NL      M          32    204 Neot… albigu…\n 2     1164     8     5  1978       2 NL      M          34    199 Neot… albigu…\n 3     1261     9     4  1978       2 NL      M          32    197 Neot… albigu…\n 4     1756     4    29  1979       2 NL      M          33    166 Neot… albigu…\n 5     1818     5    30  1979       2 NL      M          32    184 Neot… albigu…\n 6     1882     7     4  1979       2 NL      M          32    206 Neot… albigu…\n 7     2133    10    25  1979       2 NL      F          33    274 Neot… albigu…\n 8     2184    11    17  1979       2 NL      F          30    186 Neot… albigu…\n 9     2406     1    16  1980       2 NL      F          33    184 Neot… albigu…\n10     3000     5    18  1980       2 NL      F          31     87 Neot… albigu…\n# … with 30,728 more rows, 2 more variables: taxa <chr>, plot_type <chr>, and\n#   abbreviated variable names ¹​record_id, ²​species_id, ³​hindfoot_length"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Hello, world!",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "miserable uncertainty",
    "section": "",
    "text": "R, with a little help from a few friends\n\n\n\n\n\n\n\nteaching and learning\n\n\nR\n\n\nnorthernBUG\n\n\n\n\n\n\n\n\n\n\n\nJun 28, 2023\n\n\nJarek Bryk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroup work and peer-marking system with R: part 2\n\n\n\n\n\n\n\nR\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nNov 21, 2022\n\n\nJarek Bryk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nGroup work and peer-marking system with R: part 1\n\n\n\n\n\n\n\nR\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nOct 16, 2022\n\n\nJarek Bryk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUndergraduate group-based data analysis project with R: how we do it\n\n\n\n\n\n\n\nteaching and learning\n\n\nR\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2022\n\n\nJarek Bryk\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "about",
    "section": "",
    "text": "Mark Twain (allegedly)"
  },
  {
    "objectID": "posts/How to set up groups and peer marking system in R/index.html",
    "href": "posts/How to set up groups and peer marking system in R/index.html",
    "title": "How to set up groups and peer marking system with R",
    "section": "",
    "text": "How we use it\nIn our case, the students are actually learning data science with R and their group-based project is analysis of a complex dataset, but the system described below is agnostic to the topic, number of groups or teams or peer-marking criteria.\nWe have two independent groups of students and each group is split into several teams of 4-6 students. The peer marking system has five criteria, based on which each student anonymously marks other students in their team. The peer-marking is run twice in a term, once three weeks after the beginning of the group work and the second time in the final week of the class.\n\n\nMarking criteria\n\n\n\n\n\n\nMarking criteria\n\n\n\n\nAbility to provide direction for the group activities (leadership)\n\n\nInvolvement in the execution of the project work (developing R code)\n\n\nInvolvement in the presentation of group work\n\n\nAbility to suggest solutions and other approaches to group or work challenges (creativity)\n\n\nAbility to work well with and support other members of the group\n\n\n\n\nTable with peer-marking criteria\n\n\n\n\n\n\nPeer mark\nGuidance\n\n\n\n\n0\nStudent did not contribute at all; was missing most of the time; did not complete assigned tasks; team’s results would not change had this person not been a member of the team\n\n\n1\nStudent contributed only minimally; attendance and task completion was low; team’s results would change only slightly had this person not been a member of the team\n\n\n2\nAt least one of the elements (student contributions/attendance/task completion), including the contributions, was adequate\n\n\n3\nAt least two of the elements (student contributions/attendance/task completion), including the contributions, were good\n\n\n4\nStudent made substantial contributions to the team’s results and maintained very good attendance and task completion\n\n\n5\nStudent made significant and substantial contributions; the team’s results would be noticeably worse without them; all other responsibilities were completed (i.e. attended all meetings, completed all tasks)\n\n\n\n\n\nThe system\nThe system comprises of three elements:\n\ndividing students into teams of a given size; we split students randomly into teams and only perform a manual check for gender balance of each team;\ngenerating Excel peer-marking forms that will be distributed to each student;\ncollecting the forms and calculating an average mark for each criterion for each student, based on their team-mates marks; this mark will be ultimately released to each student.\n\nStudents don’t mark themselves in this system (although it is easy to extend it to self-mark).\n\n\nLet’s code\nFinally!\n\nlibrary(tidyverse)\n\n── Attaching packages ─────────────────────────────────────── tidyverse 1.3.2 ──\n✔ ggplot2 3.3.6      ✔ purrr   0.3.4 \n✔ tibble  3.1.8      ✔ dplyr   1.0.10\n✔ tidyr   1.2.1      ✔ stringr 1.4.1 \n✔ readr   2.1.3      ✔ forcats 0.5.2 \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\n\nlibrary(here)\n\nhere() starts at /Users/jarek/Sites/miserable-quarto\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(readxl)\nlibrary(writexl)\n\n\nAssigning students to teams\nFirstly, we load the list of students and their IDs, alongside information to which group they are assigned (teams must be created within each group). Depending on how your list of students is generated, some tidying up may be required here. In this example, I have two groups of students (I am using the names of characters of the Grishaverse novels by Leigh Bardugo) and the file is already tidy.\n\n# List of groups and teams is provided in an Excel file\ngroups <- read_xlsx(here(\"posts/How to set up groups and peer marking system in R/\", \"groups_example.xlsx\"))\n\ngroups\n\n# A tibble: 23 × 3\n   student_name     student_number group \n   <chr>                     <dbl> <chr> \n 1 Alina Starkov             11110 group1\n 2 Nikolai Lantsov           22220 group1\n 3 Zoya Nazyalensky          33330 group1\n 4 Malyen Oretsev            44440 group1\n 5 Genya Safin               55550 group1\n 6 David Kostyk              66660 group1\n 7 Adrik Zhabin              77770 group1\n 8 Hanne Brum                88880 group1\n 9 Isaak Andreyev            99990 group1\n10 Mayu Kir-Kaat            121212 group1\n# … with 13 more rows\n\n\nWe also need another file with the names for the teams (list of cities and places in the Grishaverse), or we can manually create a character vector for this purpose.\n\n# Teams' names are also provided in an Excel file, but any vector with names will do\nteams_names <- read_xlsx(here(\"posts/How to set up groups and peer marking system in R/\", \"teams_names_example.xlsx\")) %>% pull(teams_names) %>% sample()\n\nteams_names\n\n[1] \"Os Alta\"     \"Shadow Fold\" \"Ice Court\"   \"Fjerda\"      \"Novyi Zem\"  \n[6] \"Shu Han\"     \"Ketterdam\"   \"Ravka\"      \n\n\nBefore the main assignment is run, we need to decide on how many students should be in each team. Counting how many students are there in each group should help with that, and setting up a desired number of students per team will do the rest. We use floor() to round down the number of teams per group, so the actual number of students in each team can be higher than the desired number.\n\n# How many teams can we fit in each group, assuming students_per_team in each team\n# Note this number of students per team will be approximate, some groups may end up being larger\nstudents_per_team = 4\n\ngroups %>% \n    count(group)\n\n# A tibble: 2 × 2\n  group      n\n  <chr>  <int>\n1 group1    10\n2 group2    13\n\ngroups %>% \n    group_by(group) %>% \n    summarise(teams_per_group = floor(n()/students_per_team))\n\n# A tibble: 2 × 2\n  group  teams_per_group\n  <chr>            <dbl>\n1 group1               2\n2 group2               3\n\n\nI am a fan of the purrr’s package nest-map way of looping a function over multiple groups and have learned to shape the data in the way compatible with this workflow. Here, the challenge is that our arranging students into teams has to be done within each group, and the process has to be generalisable to any number of groups and any number of students per group.\nThis is how I go about it:\n- first, I split the data by group and for each group, I calculate the number of teams that I want to create given a desired number of students per team;\n- then, I randomise order of students in each group and assign them to the specified number of teams;\n- finally, I assign a randomly chosen name for each team across all groups so that each team name is unique for the whole class.\nThere probably exists a much simpler way of doing this (let me know), but it works here.\n\n# Create a function to randomise order of students in each group and then split them into defined number of teams\nsplit2Teams <- function(df, no_of_teams) {\n    df %>% \n        slice_sample(n = nrow(.)) %>% \n        split(., 1:no_of_teams)\n}\n\n# Split students into groups and for each group: calculate number of teams, run the above function to arrange them randomly into teams and assign a unique team name.\n# Note: every time you run this piece of code, team assignment will change!\nteams_ready <- groups %>% \n    nest(data = -group) %>% \n    mutate(no_of_teams = map_dbl(data, ~floor(nrow(.)/students_per_team))) %>% \n    mutate(teams = map2(data, no_of_teams, split2Teams)) %>% \n    unnest(teams) %>% \n    mutate(teams = map2(teams, sample(teams_names[1:length(teams)]), ~mutate(.x, team_name = .y))) %>% # Assign a random team name to each team\n    select(-c(data, no_of_teams)) %>% \n    unnest(teams) %>% \n    relocate(team_name, .after = student_number)\n\nWarning in split.default(x = seq_len(nrow(x)), f = f, drop = drop, ...): data\nlength is not a multiple of split variable\n\nteams_ready\n\n# A tibble: 23 × 4\n   group  student_name     student_number team_name\n   <chr>  <chr>                     <dbl> <chr>    \n 1 group1 Adrik Zhabin              77770 Ice Court\n 2 group1 Nikolai Lantsov           22220 Ice Court\n 3 group1 Isaak Andreyev            99990 Ice Court\n 4 group1 Malyen Oretsev            44440 Ice Court\n 5 group1 Mayu Kir-Kaat            121212 Ice Court\n 6 group1 Alina Starkov             11110 Fjerda   \n 7 group1 Hanne Brum                88880 Fjerda   \n 8 group1 Genya Safin               55550 Fjerda   \n 9 group1 David Kostyk              66660 Fjerda   \n10 group1 Zoya Nazyalensky          33330 Fjerda   \n# … with 13 more rows\n\n\nLet’s save the list with ready-made teams to an Excel file, ready to be published for the students.\n\nwrite_xlsx(teams_ready, here(\"posts/How to set up groups and peer marking system in R/\", paste(\"teams_ready\", Sys.Date(), \".xlsx\", sep = \"_\")))\n\n\n\nGenerating peer-marking forms\nThis was the easy bit. Now, we have to generate a set of files, one for each student, where each file contains the marking criteria and a set of columns for all the students in a team apart from the student to whom the file is addressed.\n\n# A vector with all teams' names\ntnames <- sort(unique(teams_ready$team_name))\n\n# A list where each element, named after a team name, is a list of students in that team\ntlist <- map(tnames, ~teams_ready %>% filter(team_name == .x) %>% pull(student_name)) %>% set_names(tnames)\n\n# map(tnames, ~teams_ready %>% filter(team_name == .x) %>% select(student_name))\n\n# A list where each element, named after a team name, combines elements \"question\" and \"team_name\" with the list of students in that team\nbiglist <- map(tlist, ~c(list(question = NA_character_, team_name = NA_character_), Map(function(x) NA_character_, .x)))\n\n\n# https://stackoverflow.com/questions/30150977/r-combine-list-of-data-frames-into-single-data-frame-add-column-with-list-inde\n# split2Teams2 <- function(df, students_per_team){\n#   number_of_teams = floor(nrow(df)/students_per_team)\n#   df %>% split(., sample(sample(teams_names, students_per_team, replace = FALSE), number_of_teams)) %>% \n#       bind_rows(., .id = \"team_name\")\n#   }\n# \n# groups %>% \n#   nest(data = -group) %>% \n#   mutate(teams = map2(data, 4, splitTeams2)) %>% \n#   select(-data) %>% \n#   unnest(teams)"
  },
  {
    "objectID": "posts/R with a little help from a few friends/index.html",
    "href": "posts/R with a little help from a few friends/index.html",
    "title": "R, with a little help from a few friends",
    "section": "",
    "text": "My presentation at the Northern BUG\nIn January 2023, I gave a short talk at the 8th meeting of the Northern Bioinformatics User Group (nBUG for short), which is an informal network of computational biologists and users or bioinformatics services in the (loosely defined) north of England. If you haven’t heard about us and are in range of a reasonable commute, please come to one of our next meetings (we have three one-day, single-track meetings per year), it’s really nice :-).\nMy talk wasn’t actually that short, as I ran over time and could not finish it properly. My excuse is that I was juggling a presentation (with slides), a live demo in R Studio and sharing my screen over Teams, over a single projector.\nAnyway, I think this is a very good reason to write my short presentation as a blog post.\n\n\nWho may find this useful?\nWhen I thought about the target audience of the talk, I had in mind postgraduate students, who had already done some work in R and are familiar with the basics of the language (e.g. various data types, loading data, working in R Studio), but who may not have thought about how to organise their data and scripts, or be aware of really simple tricks that would make their work much more effective and efficient. I didn’t really know whether this was the right pitch, but a few post-talk comments indicated it was a good one.\n\n\n\nHe’s not wrong ;-). Photo by Andy Mason.\n\n\nHere we go.\n\n\n1. Use projects + here + Rmd/Qmd for everything\n\n\n2. Name things well\n\n\n3. Five or six packages that will make your life so much easier\nI also wanted to mention several packages with functions that, in my opinion, really make data wrangling and running statistics (pretty much 90% of what my imaginary target audience wants to do) much easier. Here are the best of:\n\ndatapasta by Miles McBain. It’s an R Studio addin that lets you easily copy-paste basic data structures into R (e.g. vectors and tables), skipping the formatting and importing steps. Here is an animated GIF from the linked website that explains it better:\n\n\n\n\nWhat datapasta does. Excellent name, too.\n\n\nI use it quite often, also to create dummy data to test various functions or try to understand what’s going on with my code.\n\njanitor by Sam Firke. Probably the most popular of the basic data wrangling packages, with its blockbuster function clean_names(), which standardises messy column names by substituting spaces, normalising font cases and protecting from having names starting with a number or other forbidden symbol. But it also has a function get_dupes() that identifies duplicated rows/variables in the data and a function tabyl() that prettifies tables, including adding rows with totals or formatting the tables as inputs to statistical tests such as χ2.\nrsatix by Alboukadel Kassambara and easystats by Daniel Lüdecke et al.\nbroom\nforcats\n\n\n\n4. Know your interface\n\n\n5. What lies beyond"
  },
  {
    "objectID": "posts/Groups and peer marking system in R part 1/index.html",
    "href": "posts/Groups and peer marking system in R part 1/index.html",
    "title": "Group work and peer-marking system with R: part 1",
    "section": "",
    "text": "Some background\nHere is an imaginary scenario: you are running a class where you have to split students into teams, in which they are to complete a project of some sort. Further imagine that you would like to track the level of contribution of each member of a team to the final project mark and potentially be able to detect conflicts early. Also, you happen to know R…\n\n\nThe system\nThe system comprises of three elements:\n\ndividing students into teams of a given size; we split students randomly into teams and only perform a manual check for gender balance of each team;\ngenerating Excel peer-marking forms that will be distributed to each student;\ncollecting the forms and calculating an average mark for each criterion for each student, based on their team-mates marks; this mark will be ultimately released to each student.\n\nStudents don’t mark themselves in this system (although it is easy to extend it to self-mark).\n\n\nLet’s code\nFinally!\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n\nlibrary(here)\n\nhere() starts at /Users/jarek/Sites/miserable-quarto\n\nlibrary(janitor)\n\n\nAttaching package: 'janitor'\n\nThe following objects are masked from 'package:stats':\n\n    chisq.test, fisher.test\n\nlibrary(readxl)\nlibrary(writexl)\n\n\nAssigning students to teams\nFirstly, we load the list of students and their IDs, alongside information to which group they are assigned (teams must be created within each group). Depending on how your list of students is generated, some tidying up may be required here. In this example, I have two groups of students (I am using the names of characters of the Grishaverse novels by Leigh Bardugo) and the file is already tidy.\n\n# List of groups and teams is provided in an Excel file\ngroups <- read_xlsx(here(\"posts\", \"Groups and peer marking system in R part 1\", \"groups_example.xlsx\"))\n\ngroups\n\n# A tibble: 23 × 3\n   student_name     student_number group \n   <chr>                     <dbl> <chr> \n 1 Alina Starkov             11110 group1\n 2 Nikolai Lantsov           22220 group1\n 3 Zoya Nazyalensky          33330 group1\n 4 Malyen Oretsev            44440 group1\n 5 Genya Safin               55550 group1\n 6 David Kostyk              66660 group1\n 7 Adrik Zhabin              77770 group1\n 8 Hanne Brum                88880 group1\n 9 Isaak Andreyev            99990 group1\n10 Mayu Kir-Kaat            121212 group1\n# ℹ 13 more rows\n\n\nWe also need another file with the names for the teams (list of cities and places in the Grishaverse), or we can manually create a character vector for this purpose.\n\n# Teams' names are also provided in an Excel file, but any vector with names will do\nteams_names <- read_xlsx(here(\"posts\", \"Groups and peer marking system in R part 1\", \"teams_names_example.xlsx\")) %>% pull(teams_names) %>% sample()\n\nteams_names\n\n[1] \"Shu Han\"     \"Fjerda\"      \"Ketterdam\"   \"Novyi Zem\"   \"Os Alta\"    \n[6] \"Ice Court\"   \"Ravka\"       \"Shadow Fold\"\n\n\nBefore the main assignment is run, we need to decide on how many students should be in each team. Counting how many students are there in each group should help with that, and setting up a desired number of students per team will do the rest. We use floor() to round down the number of teams per group, so the actual number of students in each team can be higher than the desired number.\n\n# How many teams can we fit in each group, assuming students_per_team in each team\n# Note this number of students per team will be approximate, some groups may end up being larger\nstudents_per_team = 4\n\ngroups %>% \n    count(group)\n\n# A tibble: 2 × 2\n  group      n\n  <chr>  <int>\n1 group1    10\n2 group2    13\n\ngroups %>% \n    group_by(group) %>% \n    summarise(teams_per_group = floor(n()/students_per_team))\n\n# A tibble: 2 × 2\n  group  teams_per_group\n  <chr>            <dbl>\n1 group1               2\n2 group2               3\n\n\nI am a fan of the purrr’s package nest-map way of looping a function over multiple groups and have learned to shape the data in the way compatible with this workflow. Here, the challenge is that our arranging students into teams has to be done within each group, and the process has to be generalisable to any number of groups and any number of students per group.\nThis is how I go about it:\n\nfirst, I split the data by group and for each group, I calculate the number of teams that I want to create given a desired number of students per team;\nthen, I randomise order of students in each group and assign them to the specified number of teams;\nfinally, I assign a randomly chosen name for each team across all groups so that each team name is unique for the whole class.\n\nThere probably exists a much simpler way of doing this (let me know!), but it works here.\n\n# Create a function to randomise order of students in each group and then split them into defined number of teams\nsplit2Teams <- function(df, no_of_teams) {\n    df %>% \n        slice_sample(n = nrow(.)) %>% \n        split(., 1:no_of_teams)\n}\n\n# Split students into groups and for each group: calculate number of teams, run the above function to arrange them randomly into teams and assign a unique team name.\n# Note: every time you run this piece of code, team assignment will change!\nteams_ready <- groups %>% \n    nest(data = -group) %>% \n    mutate(no_of_teams = map_dbl(data, ~floor(nrow(.)/students_per_team))) %>% \n    mutate(teams = map2(data, no_of_teams, split2Teams)) %>% \n    unnest(teams) %>% \n    mutate(teams = map2(teams, sample(teams_names[1:length(teams)]), ~mutate(.x, team_name = .y))) %>% # Assign a random team name to each team\n    select(-c(data, no_of_teams)) %>% \n    unnest(teams) %>% \n    relocate(team_name, .after = student_number)\n\nWarning: There was 1 warning in `mutate()`.\nℹ In argument: `teams = map2(data, no_of_teams, split2Teams)`.\nCaused by warning in `split.default()`:\n! data length is not a multiple of split variable\n\nteams_ready\n\n# A tibble: 23 × 4\n   group  student_name     student_number team_name\n   <chr>  <chr>                     <dbl> <chr>    \n 1 group1 Malyen Oretsev            44440 Os Alta  \n 2 group1 Mayu Kir-Kaat            121212 Os Alta  \n 3 group1 Alina Starkov             11110 Os Alta  \n 4 group1 Nikolai Lantsov           22220 Os Alta  \n 5 group1 Adrik Zhabin              77770 Os Alta  \n 6 group1 Zoya Nazyalensky          33330 Fjerda   \n 7 group1 Genya Safin               55550 Fjerda   \n 8 group1 David Kostyk              66660 Fjerda   \n 9 group1 Hanne Brum                88880 Fjerda   \n10 group1 Isaak Andreyev            99990 Fjerda   \n# ℹ 13 more rows\n\n\nLet’s save the list with ready-made teams to an Excel file, ready to be published for the students. After the file is created, I manually inspect it to make sure there is roughly the same proportion of males and females in each team and make adjustments to rearrange teams if necessary.\n\nwrite_xlsx(teams_ready, here(\"posts\", \"Groups and peer marking system in R part 1\", paste(\"teams_ready\", Sys.Date(), \".xlsx\", sep = \"_\")))\n\n\n\nGenerating peer-marking forms\nThis was the easy bit. Now, we have to generate a set of files, one for each student, where each file contains the marking criteria and a set of columns for all the students in a team apart from the student to whom the file is addressed.\n\n# A vector with all teams' names\ntnames <- sort(unique(teams_ready$team_name))\n\n# A list where each element, named after a team name, is a list of students in that team\ntlist <- map(tnames, ~teams_ready %>% filter(team_name == .x) %>% pull(student_name)) %>% set_names(tnames)\n\n# map(tnames, ~teams_ready %>% filter(team_name == .x) %>% select(student_name))\n\n# A list where each element, named after a team name, combines elements \"question\" and \"team_name\" with the list of students in that team\nbiglist <- map(tlist, ~c(list(question = NA_character_, team_name = NA_character_), Map(function(x) NA_character_, .x)))\n\n\n# https://stackoverflow.com/questions/30150977/r-combine-list-of-data-frames-into-single-data-frame-add-column-with-list-inde\n# split2Teams2 <- function(df, students_per_team){\n#   number_of_teams = floor(nrow(df)/students_per_team)\n#   df %>% split(., sample(sample(teams_names, students_per_team, replace = FALSE), number_of_teams)) %>% \n#       bind_rows(., .id = \"team_name\")\n#   }\n# \n# groups %>% \n#   nest(data = -group) %>% \n#   mutate(teams = map2(data, 4, splitTeams2)) %>% \n#   select(-data) %>% \n#   unnest(teams)"
  },
  {
    "objectID": "posts/Group-based data analysis project with R/index.html",
    "href": "posts/Group-based data analysis project with R/index.html",
    "title": "Undergraduate group-based data analysis project with R: how we do it",
    "section": "",
    "text": "Everybody should learn to use R…\n…during their undergraduate degree in life sciences.\nIn our case, the students, who attend the classes in 2 groups, in the first 5-6 week are individually learning the basics of data analysis with R. Then the students are split into 5-6-person teams to complete a group-based project, which is an open-ended analysis of a complex dataset. We only work in a Windows-based environment and we do not use version control.\nFor more details about what we do in these clasess, see my other post.\nThe teams’ analyses are marked based on na R Notebook file from which we could reproduce their analyses.\nTo the vast majority of the students, this is their first contact with programming of any sort, and the first contact with concepts of file system and paths (speaking from experience, it looks like these concepts are black magic to almost anyone born after 1990). This excludes any chance of using, for example, version control on their code submissions, which would allow direct quantification of individual students’ contributions to the codebase. In addition, we do not expect every student in the team to contribute equally to all elements of the assignment; some division of labour will occur, either naturally or because some students would avoid doing coding or prefer other elements of the project.\nBut the system described below is agnostic to the topic, number of groups or teams or peer-marking criteria.\nWe have two independent groups of students and each group is split into several teams of 4-6 students. The peer marking system has five criteria, based on which each student anonymously marks other students in their team. The peer-marking is run twice in a term, once three weeks after the beginning of the group work and the second time in the final week of the class.\n\n\nMarking criteria\n\n\n\n\n\n\nMarking criteria\n\n\n\n\nAbility to provide direction for the group activities (leadership)\n\n\nInvolvement in the execution of the project work (developing R code)\n\n\nInvolvement in the presentation of group work\n\n\nAbility to suggest solutions and other approaches to group or work challenges (creativity)\n\n\nAbility to work well with and support other members of the group\n\n\n\n\nTable with peer-marking criteria\n\n\n\n\n\n\nPeer mark\nGuidance\n\n\n\n\n0\nStudent did not contribute at all; was missing most of the time; did not complete assigned tasks; team’s results would not change had this person not been a member of the team\n\n\n1\nStudent contributed only minimally; attendance and task completion was low; team’s results would change only slightly had this person not been a member of the team\n\n\n2\nAt least one of the elements (student contributions/attendance/task completion), including the contributions, was adequate\n\n\n3\nAt least two of the elements (student contributions/attendance/task completion), including the contributions, were good\n\n\n4\nStudent made substantial contributions to the team’s results and maintained very good attendance and task completion\n\n\n5\nStudent made significant and substantial contributions; the team’s results would be noticeably worse without them; all other responsibilities were completed (i.e. attended all meetings, completed all tasks)"
  }
]